package webauthn

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/go-webauthn/webauthn/protocol"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *SessionData) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "challenge":
			z.Challenge, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Challenge")
				return
			}
		case "rpid":
			z.RelyingPartyID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RelyingPartyID")
				return
			}
		case "uid":
			z.UserID, err = dc.ReadBytes(z.UserID)
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "allowed":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "AllowedCredentialIDs")
				return
			}
			if cap(z.AllowedCredentialIDs) >= int(zb0002) {
				z.AllowedCredentialIDs = (z.AllowedCredentialIDs)[:zb0002]
			} else {
				z.AllowedCredentialIDs = make([][]byte, zb0002)
			}
			for za0003 := range z.AllowedCredentialIDs {
				z.AllowedCredentialIDs[za0003], err = dc.ReadBytes(z.AllowedCredentialIDs[za0003])
				if err != nil {
					err = msgp.WrapError(err, "AllowedCredentialIDs", za0003)
					return
				}
			}
		case "exp":
			z.Expires, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Expires")
				return
			}
		case "uv":
			{
				var zb0003 string
				zb0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "UserVerification")
					return
				}
				z.UserVerification = protocol.UserVerificationRequirement(zb0003)
			}
		case "ext":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Extensions")
				return
			}
			if z.Extensions == nil {
				z.Extensions = make(map[string]interface{}, zb0004)
			} else if len(z.Extensions) > 0 {
				for key := range z.Extensions {
					delete(z.Extensions, key)
				}
			}
			for zb0004 > 0 {
				zb0004--
				var za0004 string
				var za0005 interface{}
				za0004, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Extensions")
					return
				}
				za0005, err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "Extensions", za0004)
					return
				}
				z.Extensions[za0004] = za0005
			}
		case "params":
			var zb0005 uint32
			zb0005, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "CredParams")
				return
			}
			if cap(z.CredParams) >= int(zb0005) {
				z.CredParams = (z.CredParams)[:zb0005]
			} else {
				z.CredParams = make([]protocol.CredentialParameter, zb0005)
			}
			for za0006 := range z.CredParams {
				err = z.CredParams[za0006].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "CredParams", za0006)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SessionData) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "challenge"
	err = en.Append(0x88, 0xa9, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Challenge)
	if err != nil {
		err = msgp.WrapError(err, "Challenge")
		return
	}
	// write "rpid"
	err = en.Append(0xa4, 0x72, 0x70, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.RelyingPartyID)
	if err != nil {
		err = msgp.WrapError(err, "RelyingPartyID")
		return
	}
	// write "uid"
	err = en.Append(0xa3, 0x75, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.UserID)
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	// write "allowed"
	err = en.Append(0xa7, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.AllowedCredentialIDs)))
	if err != nil {
		err = msgp.WrapError(err, "AllowedCredentialIDs")
		return
	}
	for za0003 := range z.AllowedCredentialIDs {
		err = en.WriteBytes(z.AllowedCredentialIDs[za0003])
		if err != nil {
			err = msgp.WrapError(err, "AllowedCredentialIDs", za0003)
			return
		}
	}
	// write "exp"
	err = en.Append(0xa3, 0x65, 0x78, 0x70)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Expires)
	if err != nil {
		err = msgp.WrapError(err, "Expires")
		return
	}
	// write "uv"
	err = en.Append(0xa2, 0x75, 0x76)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.UserVerification))
	if err != nil {
		err = msgp.WrapError(err, "UserVerification")
		return
	}
	// write "ext"
	err = en.Append(0xa3, 0x65, 0x78, 0x74)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Extensions)))
	if err != nil {
		err = msgp.WrapError(err, "Extensions")
		return
	}
	for za0004, za0005 := range z.Extensions {
		err = en.WriteString(za0004)
		if err != nil {
			err = msgp.WrapError(err, "Extensions")
			return
		}
		err = en.WriteIntf(za0005)
		if err != nil {
			err = msgp.WrapError(err, "Extensions", za0004)
			return
		}
	}
	// write "params"
	err = en.Append(0xa6, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.CredParams)))
	if err != nil {
		err = msgp.WrapError(err, "CredParams")
		return
	}
	for za0006 := range z.CredParams {
		err = z.CredParams[za0006].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "CredParams", za0006)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SessionData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "challenge"
	o = append(o, 0x88, 0xa9, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65)
	o = msgp.AppendString(o, z.Challenge)
	// string "rpid"
	o = append(o, 0xa4, 0x72, 0x70, 0x69, 0x64)
	o = msgp.AppendString(o, z.RelyingPartyID)
	// string "uid"
	o = append(o, 0xa3, 0x75, 0x69, 0x64)
	o = msgp.AppendBytes(o, z.UserID)
	// string "allowed"
	o = append(o, 0xa7, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64)
	o = msgp.AppendArrayHeader(o, uint32(len(z.AllowedCredentialIDs)))
	for za0003 := range z.AllowedCredentialIDs {
		o = msgp.AppendBytes(o, z.AllowedCredentialIDs[za0003])
	}
	// string "exp"
	o = append(o, 0xa3, 0x65, 0x78, 0x70)
	o = msgp.AppendTime(o, z.Expires)
	// string "uv"
	o = append(o, 0xa2, 0x75, 0x76)
	o = msgp.AppendString(o, string(z.UserVerification))
	// string "ext"
	o = append(o, 0xa3, 0x65, 0x78, 0x74)
	o = msgp.AppendMapHeader(o, uint32(len(z.Extensions)))
	for za0004, za0005 := range z.Extensions {
		o = msgp.AppendString(o, za0004)
		o, err = msgp.AppendIntf(o, za0005)
		if err != nil {
			err = msgp.WrapError(err, "Extensions", za0004)
			return
		}
	}
	// string "params"
	o = append(o, 0xa6, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.CredParams)))
	for za0006 := range z.CredParams {
		o, err = z.CredParams[za0006].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "CredParams", za0006)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SessionData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "challenge":
			z.Challenge, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Challenge")
				return
			}
		case "rpid":
			z.RelyingPartyID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RelyingPartyID")
				return
			}
		case "uid":
			z.UserID, bts, err = msgp.ReadBytesBytes(bts, z.UserID)
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "allowed":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AllowedCredentialIDs")
				return
			}
			if cap(z.AllowedCredentialIDs) >= int(zb0002) {
				z.AllowedCredentialIDs = (z.AllowedCredentialIDs)[:zb0002]
			} else {
				z.AllowedCredentialIDs = make([][]byte, zb0002)
			}
			for za0003 := range z.AllowedCredentialIDs {
				z.AllowedCredentialIDs[za0003], bts, err = msgp.ReadBytesBytes(bts, z.AllowedCredentialIDs[za0003])
				if err != nil {
					err = msgp.WrapError(err, "AllowedCredentialIDs", za0003)
					return
				}
			}
		case "exp":
			z.Expires, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Expires")
				return
			}
		case "uv":
			{
				var zb0003 string
				zb0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UserVerification")
					return
				}
				z.UserVerification = protocol.UserVerificationRequirement(zb0003)
			}
		case "ext":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Extensions")
				return
			}
			if z.Extensions == nil {
				z.Extensions = make(map[string]interface{}, zb0004)
			} else if len(z.Extensions) > 0 {
				for key := range z.Extensions {
					delete(z.Extensions, key)
				}
			}
			for zb0004 > 0 {
				var za0004 string
				var za0005 interface{}
				zb0004--
				za0004, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Extensions")
					return
				}
				za0005, bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Extensions", za0004)
					return
				}
				z.Extensions[za0004] = za0005
			}
		case "params":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CredParams")
				return
			}
			if cap(z.CredParams) >= int(zb0005) {
				z.CredParams = (z.CredParams)[:zb0005]
			} else {
				z.CredParams = make([]protocol.CredentialParameter, zb0005)
			}
			for za0006 := range z.CredParams {
				bts, err = z.CredParams[za0006].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "CredParams", za0006)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SessionData) Msgsize() (s int) {
	s = 1 + 10 + msgp.StringPrefixSize + len(z.Challenge) + 5 + msgp.StringPrefixSize + len(z.RelyingPartyID) + 4 + msgp.BytesPrefixSize + len(z.UserID) + 8 + msgp.ArrayHeaderSize
	for za0003 := range z.AllowedCredentialIDs {
		s += msgp.BytesPrefixSize + len(z.AllowedCredentialIDs[za0003])
	}
	s += 4 + msgp.TimeSize + 3 + msgp.StringPrefixSize + len(string(z.UserVerification)) + 4 + msgp.MapHeaderSize
	if z.Extensions != nil {
		for za0004, za0005 := range z.Extensions {
			_ = za0005
			s += msgp.StringPrefixSize + len(za0004) + msgp.GuessSize(za0005)
		}
	}
	s += 7 + msgp.ArrayHeaderSize
	for za0006 := range z.CredParams {
		s += z.CredParams[za0006].Msgsize()
	}
	return
}
